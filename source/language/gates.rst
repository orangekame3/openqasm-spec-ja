量子ゲート
==========

量子ゲートは量子ビットに対するユニタリ演算を表現する基本的な構成要素です。OpenQASM 3.0では、柔軟で表現力豊かな量子回路の記述を可能にする包括的なゲートシステムを提供します。

ゲートの概要
------------

量子ゲートは以下の特徴を持ちます：

- **ユニタリ性**: すべてのゲートはユニタリ変換を表現
- **可逆性**: 量子計算の可逆性を保持
- **パラメータ化**: 角度や他のパラメータを受け取ることが可能
- **合成可能**: 複数のゲートを組み合わせて新しいゲートを定義可能

ゲートの定義方法
----------------

OpenQASMでは3つの方法でゲートを定義できます：

1. **階層的定義**: 既存のゲートを組み合わせて新しいゲートを定義
2. **ゲート修飾子**: 既存のゲートに修飾子を適用して匿名ゲートを作成
3. **組み込みゲート**: 言語に組み込まれた基本ゲート

階層的ゲート定義
~~~~~~~~~~~~~~~~

``gate``キーワードを使用して新しいゲートを定義できます：

.. code-block:: qasm3

   // 基本的なゲート定義
   gate hadamard q {
       h q;
   }
   
   // パラメータ化されたゲート
   gate rz(theta) q {
       gphase(-theta/2);
       u(0, 0, theta) q;
   }
   
   // 複数量子ビットゲート
   gate cnot a, b {
       ctrl @ x a, b;
   }

パラメータ化ゲート
~~~~~~~~~~~~~~~~~~

ゲートはパラメータを受け取ることができます：

.. code-block:: qasm3

   // 回転ゲートの定義
   gate rx(theta) q {
       u(theta, -π/2, π/2) q;
   }
   
   gate ry(theta) q {
       u(theta, 0, 0) q;
   }
   
   // 使用例
   qubit q;
   rx(π/4) q;  // π/4回転を適用

ゲート修飾子
------------

ゲート修飾子を使用して既存のゲートを変更できます：

制御修飾子
~~~~~~~~~~

``ctrl``および``negctrl``修飾子で制御ゲートを作成：

.. code-block:: qasm3

   qubit[3] q;
   
   // 制御Xゲート（CNOT）
   ctrl @ x q[0], q[1];
   
   // 負制御ゲート
   negctrl @ x q[0], q[1];
   
   // 多重制御ゲート
   ctrl(2) @ x q[0], q[1], q[2];

逆修飾子
~~~~~~~~

``inv``修飾子でゲートの逆操作を実行：

.. code-block:: qasm3

   qubit q;
   
   // Sゲートとその逆操作
   s q;
   inv @ s q;  // S†ゲート

べき乗修飾子
~~~~~~~~~~~~

``pow``修飾子でゲートの累乗を計算：

.. code-block:: qasm3

   qubit q;
   
   // Tゲートの平方根
   pow(1/2) @ t q;
   
   // Xゲートの2乗（恒等操作）
   pow(2) @ x q;

組み込みゲート
--------------

OpenQASMには2つの基本的な組み込みゲートがあります：

Uゲート
~~~~~~~

``U(θ, φ, λ)``は任意の1量子ビットユニタリ演算を表現：

.. code-block:: qasm3

   qubit q;
   
   // 任意の1量子ビット回転
   U(π/2, 0, π) q;  // Yゲートと等価
   
   // パウリXゲート
   U(π, 0, π) q;

Uゲートの行列表現：

.. math::

   U(\theta, \phi, \lambda) = \begin{pmatrix}
   \cos(\theta/2) & -e^{i\lambda}\sin(\theta/2) \\
   e^{i\phi}\sin(\theta/2) & e^{i(\phi+\lambda)}\cos(\theta/2)
   \end{pmatrix}

グローバル位相ゲート
~~~~~~~~~~~~~~~~~~~~

``gphase(γ)``は全体的な位相を追加：

.. code-block:: qasm3

   // グローバル位相の追加
   gphase(π/4);

ゲートの適用
------------

単一量子ビットへの適用
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: qasm3

   qubit q;
   
   // 基本ゲートの適用
   x q;     // パウリXゲート
   y q;     // パウリYゲート
   z q;     // パウリZゲート
   h q;     // アダマールゲート

量子レジスタへの適用
~~~~~~~~~~~~~~~~~~~~

.. code-block:: qasm3

   qubit[5] qreg;
   
   // 全ビットにHゲートを適用
   h qreg;
   
   // 特定のビットに適用
   x qreg[0];
   h qreg[1:3];  // qreg[1], qreg[2], qreg[3]に適用

ブロードキャスト機能
~~~~~~~~~~~~~~~~~~~~

同じサイズのレジスタに一括でゲートを適用：

.. code-block:: qasm3

   qubit[3] ctrl_qubits;
   qubit[3] target_qubits;
   
   // 対応するペアにCNOTを適用
   ctrl @ x ctrl_qubits, target_qubits;
   // これは以下と等価：
   // ctrl @ x ctrl_qubits[0], target_qubits[0];
   // ctrl @ x ctrl_qubits[1], target_qubits[1];
   // ctrl @ x ctrl_qubits[2], target_qubits[2];

条件付きゲート適用
------------------

古典的な条件に基づいてゲートを適用：

.. code-block:: qasm3

   qubit q;
   bit c;
   
   // 測定
   c = measure q;
   
   // 条件付きでXゲートを適用
   if (c) {
       x q;
   }

ゲートの合成
------------

複雑な量子回路を構築するためのゲート合成：

.. code-block:: qasm3

   // Bell状態の準備
   gate bell_prep a, b {
       h a;
       ctrl @ x a, b;
   }
   
   // 量子フーリエ変換（3量子ビット）
   gate qft3 a, b, c {
       h a;
       ctrl @ s a, b;
       ctrl @ t a, c;
       h b;
       ctrl @ s b, c;
       h c;
   }

パラメータの扱い
----------------

角度パラメータ
~~~~~~~~~~~~~~

角度パラメータは2π周期で扱われます：

.. code-block:: qasm3

   qubit q;
   angle theta = π/4;
   
   // 以下は等価
   rx(theta) q;
   rx(theta + 2π) q;

式としてのパラメータ
~~~~~~~~~~~~~~~~~~~~

.. code-block:: qasm3

   qubit q;
   float t = 0.5;
   
   // 式を使用したパラメータ
   rx(π * t) q;
   ry(2 * π / 3) q;

最適化とコンパイル
------------------

ゲートの最適化
~~~~~~~~~~~~~~

コンパイラは以下の最適化を実行可能：

- **ゲート融合**: 連続する同種のゲートを結合
- **回路簡約**: 逆操作のペアを除去
- **パラメータ最適化**: 数値的に等価な表現への変換

.. code-block:: qasm3

   qubit q;
   
   // 最適化前
   x q;
   x q;  // この2つのXゲートは除去される
   
   // 最適化前
   rx(π/4) q;
   rx(π/4) q;  // rx(π/2) q; に融合される

まとめ
------

OpenQASMの量子ゲートシステムは：

- **表現力**: 任意のユニタリ演算を記述可能
- **モジュラリティ**: ゲートの階層的定義による再利用性
- **柔軟性**: 修飾子による動的なゲート変換
- **効率性**: ブロードキャストと最適化による高速実行

これらの機能により、複雑な量子アルゴリズムを効率的かつ読みやすく記述することができます。